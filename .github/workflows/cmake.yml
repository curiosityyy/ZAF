name: CMake

defaults:
  run:
    shell: bash -ieo pipefail {0}

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        ${{github.workspace}}/scripts/install_libzmq.sh ${{github.workspace}}/../
        ${{github.workspace}}/scripts/install_gtest.sh ${{github.workspace}}/../
        ${{github.workspace}}/scripts/install_glog.sh ${{github.workspace}}/../
        ${{github.workspace}}/scripts/install_phmap.sh ${{github.workspace}}/../

    - name: Configure CMake
      # Configure CMake in a 'release' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        . ${HOME}/.bashrc
        echo ${ZMQ_ROOT}
        echo ${GTEST_ROOT}
        echo ${GLOG_ROOT}
        echo ${PHMAP_ROOT}
        cmake -B ${{github.workspace}}/release -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      working-directory: ${{github.workspace}}/release
      # Build your program with the given configuration
      run: make all -j4

    - name: Test
      working-directory: ${{github.workspace}}/release
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: timeout 10 ./tests/Tests

    - name: Examples
      working-directory: ${{github.workspace}}/release
      run: |
        echo "Run HelloWorld"
        ./examples/HelloWorld
        echo "Run HelloWorldX"
        ./examples/HelloWorldX
        echo "Run HelloWorldNetwork"
        ./examples/HelloWorldNetwork
        echo "Run HelloWorldByActorEngine"
        ./examples/HelloWorldByActorEngine
        echo "Run Shuffle"
        ./examples/Shuffle
        echo "Run ShuffleX"
        ./examples/ShuffleX
        echo "Run LoadRebalance"
        ./examples/LoadRebalance
        echo "RUn ActorDelivery"
        ./examples/ActorDelivery

    - name: BuildMini
      run: |
        cmake -B ${{github.workspace}}/release_mini -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_TEST=false -DENABLE_PHMAP=false
        cd ${{github.workspace}}/release_mini
        make all -j4
        echo "Run HelloWorld"
        ./examples/HelloWorld
        echo "Run HelloWorldNetwork"
        ./examples/HelloWorldNetwork
        echo "Run HelloWorldByActorEngine"
        ./examples/HelloWorldByActorEngine

    - name: Valgrind
      working-directory: ${{github.workspace}}/release
      run: |
        sudo apt install -y valgrind
        valgrind ./examples/HelloWorld
        valgrind ./examples/HelloWorldX
        valgrind ./examples/HelloWorldByActorEngine
        valgrind ./examples/HelloWorldNetwork
